// Generated by CoffeeScript 1.6.3
var App, EditPanel, GameGrid, GamePlayer, GameRenderer, GameTextures, GameTile, Levels,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

EditPanel = (function() {
  EditPanel.prototype.view = null;

  EditPanel.prototype.sprites = [];

  function EditPanel() {
    this.spriteClick = __bind(this.spriteClick, this);
    this.disable = __bind(this.disable, this);
    this.enable = __bind(this.enable, this);
    var arr, i, sp, _i, _ref;
    this.view = new PIXI.DisplayObjectContainer();
    arr = ['normal', 'metal', 'corner'];
    for (i = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      sp = new PIXI.Sprite(window.app.textures.getTexture(arr[i]));
      sp.position.x = (i * 64) % 576;
      sp.position.y = Math.floor(i / 64) * 64;
      this.sprites.push({
        sprite: sp,
        id: arr[i]
      });
      this.view.addChild(sp);
    }
  }

  EditPanel.prototype.enable = function() {
    var sp, _i, _len, _ref;
    _ref = this.sprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sp = _ref[_i];
      sp.sprite.interactive = true;
      sp.sprite.onclick = this.spriteClick;
    }
    return null;
  };

  EditPanel.prototype.disable = function() {
    var sp, _i, _len, _ref;
    _ref = this.sprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sp = _ref[_i];
      sp.sprite.interactive = false;
      sp.sprite.onclick = null;
    }
    return null;
  };

  EditPanel.prototype.spriteClick = function(e) {
    var sp, _i, _len, _ref;
    e.stopPropagation();
    _ref = this.sprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sp = _ref[_i];
      if (sp.sprite === e.target) {
        console.log('SELECTED : ' + sp.id);
      }
    }
    return null;
  };

  return EditPanel;

})();

GameRenderer = (function() {
  GameRenderer.prototype.renderer = null;

  GameRenderer.prototype.stage = null;

  GameRenderer.prototype.tiles = {};

  GameRenderer.prototype.sprites = [];

  GameRenderer.prototype.deadSprites = [];

  GameRenderer.prototype.pickups = {};

  GameRenderer.prototype.deadPickups = [];

  GameRenderer.prototype.tileSize = 64;

  GameRenderer.prototype.tileHolder = null;

  GameRenderer.prototype.playerSprite = null;

  GameRenderer.prototype.editPanel = null;

  GameRenderer.prototype.editState = 'normal';

  function GameRenderer(view) {
    var tile;
    this.view = view;
    this.tileClick = __bind(this.tileClick, this);
    this.setSprite = __bind(this.setSprite, this);
    this.setPickup = __bind(this.setPickup, this);
    this.clearPickup = __bind(this.clearPickup, this);
    this.drawTiles = __bind(this.drawTiles, this);
    this.hideEditPanel = __bind(this.hideEditPanel, this);
    this.showEditPanel = __bind(this.showEditPanel, this);
    this.hideLevel = __bind(this.hideLevel, this);
    this.showLevel = __bind(this.showLevel, this);
    this.render = __bind(this.render, this);
    this.texManager = window.app.textures;
    this.renderer = PIXI.autoDetectRenderer(640, 640);
    this.stage = new PIXI.Stage(0x000000, true);
    this.bg = new PIXI.DisplayObjectContainer();
    tile = new PIXI.Sprite(this.texManager.getTexture('bg'));
    tile.scale.x = tile.scale.y = 2;
    this.bg.addChild(tile);
    tile = new PIXI.Sprite(this.texManager.getTexture('bg'));
    tile.scale.x = tile.scale.y = 2;
    tile.position.x = 640;
    this.bg.addChild(tile);
    tile = new PIXI.Sprite(this.texManager.getTexture('bg'));
    tile.scale.x = tile.scale.y = 2;
    tile.position.y = 640;
    this.bg.addChild(tile);
    tile = new PIXI.Sprite(this.texManager.getTexture('bg'));
    tile.scale.x = tile.scale.y = 2;
    tile.position.x = 640;
    tile.position.y = 640;
    this.bg.addChild(tile);
    this.stage.addChild(this.bg);
    this.levelHolder = new PIXI.DisplayObjectContainer();
    this.stage.addChild(this.levelHolder);
    this.levelHolder.position.x = 320;
    this.levelHolder.position.y = 320;
    this.tileHolder = new PIXI.DisplayObjectContainer();
    this.tileHolder.position.x = -320;
    this.tileHolder.position.y = -320;
    this.levelHolder.addChild(this.tileHolder);
    this.pickupHolder = new PIXI.DisplayObjectContainer();
    this.pickupHolder.position.x = -320;
    this.pickupHolder.position.y = -320;
    this.levelHolder.addChild(this.pickupHolder);
    this.playerSprite = new PIXI.MovieClip([this.texManager.getTexture('player-up'), this.texManager.getTexture('player-down'), this.texManager.getTexture('player-left'), this.texManager.getTexture('player-right')]);
    this.playerSprite.gotoAndStop(0);
    this.playerSprite.pivot.x = this.playerSprite.pivot.y = 32;
    this.levelHolder.addChild(this.playerSprite);
    this.levelHolder.scale.x = this.levelHolder.scale.y = 0.25;
    this.levelHolder.alpha = 0;
    this.levelHolder.rotation = Math.PI;
    this.editPanel = new EditPanel();
    this.view.appendChild(this.renderer.view);
  }

  GameRenderer.prototype.render = function(grid) {
    var dir,
      _this = this;
    this.grid = grid;
    this.drawTiles(this.grid.tiles, this.grid.gridWidth, this.grid.gridHeight);
    if (this.grid.player.x === this.grid.currentLevel.startPos.x && this.grid.player.y === this.grid.currentLevel.startPos.y) {
      this.playerSprite.scale.x = this.playerSprite.scale.y = this.playerSprite.alpha = 1;
      this.playerSprite.rotation = 0;
    }
    this.playerSprite.position.x = ((this.grid.player.x * this.tileSize) - 320) + 32;
    this.playerSprite.position.y = ((this.grid.player.y * this.tileSize) - 320) + 32;
    if (this.grid.player.falling) {
      this.grid.player.falling = false;
      TweenMax.to(this.playerSprite.scale, 1, {
        x: 0.2,
        y: 0.2
      });
      TweenMax.to(this.playerSprite, 1, {
        rotation: Math.PI,
        alpha: 0,
        onComplete: function() {
          return window.app.reset();
        }
      });
    } else {
      this.playerSprite.scale.x = this.playerSprite.scale.y = this.grid.player.scale;
    }
    if (this.grid.player.isMoving) {
      dir = this.grid.player.lastMove;
      console.log('moving ' + dir);
      if (dir.y < 0) {
        this.playerSprite.gotoAndStop(0);
      } else if (dir.y > 0) {
        this.playerSprite.gotoAndStop(1);
      } else if (dir.x < 0) {
        this.playerSprite.gotoAndStop(2);
      } else if (dir.x > 0) {
        this.playerSprite.gotoAndStop(3);
      }
    }
    this.bg.position.x++;
    this.bg.position.y++;
    if (this.bg.position.x > 0) {
      this.bg.position.x -= 640;
    }
    if (this.bg.position.y > 0) {
      this.bg.position.y -= 640;
    }
    this.renderer.render(this.stage);
    return null;
  };

  GameRenderer.prototype.showLevel = function() {
    TweenMax.to(this.levelHolder, 1, {
      alpha: 1,
      rotation: 0,
      ease: Power4.easeOut
    });
    TweenMax.to(this.levelHolder.scale, 1, {
      x: 1,
      y: 1,
      ease: Power4.easeOut
    });
    return null;
  };

  GameRenderer.prototype.hideLevel = function(onComplete) {
    var _this = this;
    TweenMax.to(this.levelHolder.scale, 1, {
      x: 2,
      y: 2,
      ease: Power4.easeOut
    });
    TweenMax.to(this.levelHolder, 1, {
      alpha: 0,
      rotation: -Math.PI,
      ease: Power4.easeOut,
      onComplete: function() {
        _this.levelHolder.scale.x = _this.levelHolder.scale.y = 0.25;
        _this.levelHolder.rotation = Math.PI;
        return onComplete();
      }
    });
    return null;
  };

  GameRenderer.prototype.showEditPanel = function() {
    this.stage.addChild(this.editPanel.view);
    this.editPanel.enable();
    return null;
  };

  GameRenderer.prototype.hideEditPanel = function() {
    this.stage.removeChild(this.editPanel.view);
    this.editPanel.disable();
    return null;
  };

  GameRenderer.prototype.drawTiles = function(tiles, xCount, yCount) {
    var i, j, tileRef, _i, _j, _ref, _ref1;
    for (i = _i = 0, _ref = xCount - 1; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = yCount - 1; _j <= _ref1; j = _j += 1) {
        tileRef = tiles[i][j];
        this.setSprite(tileRef);
        if (tileRef.pickup) {
          this.setPickup(i, j);
        } else if (this.pickups[i + '_' + j]) {
          this.clearPickup(i, j);
        }
      }
    }
    return null;
  };

  GameRenderer.prototype.clearPickup = function(x, y) {
    this.deadPickups.push(this.pickups[x + '_' + y]);
    this.pickupHolder.removeChild(this.pickups[x + '_' + y]);
    delete this.pickups[x + '_' + y];
    return null;
  };

  GameRenderer.prototype.setPickup = function(x, y) {
    var arr, digit, i, j, sp, _i, _j;
    if (!this.pickups[x + '_' + y]) {
      arr = [];
      for (i = _i = 1; _i <= 8; i = _i += 1) {
        for (j = _j = 0; _j <= 8; j = _j += 1) {
          digit = i;
          if (digit === 6) {
            digit = 4;
          } else if (digit === 7) {
            digit = 3;
          } else if (digit === 8) {
            digit = 2;
          }
          arr.push(this.texManager.getTexture('pickup_0' + digit));
        }
      }
      if (this.deadPickups.length > 0) {
        sp = this.deadPickups[0];
        this.deadPickups.splice(0, 1);
      } else {
        sp = new PIXI.MovieClip(arr);
      }
      sp.position.x = x * this.tileSize;
      sp.position.y = y * this.tileSize;
      this.pickups[x + '_' + y] = sp;
      this.pickupHolder.addChild(sp);
      sp.gotoAndPlay(Math.ceil(Math.random() * arr.length));
    }
    return null;
  };

  GameRenderer.prototype.setSprite = function(tile) {
    var tileId;
    tileId = tile.x + '_' + tile.y;
    if (!this.tiles[tileId]) {
      this.tiles[tileId] = new PIXI.Sprite(this.texManager.getTexture(tile.state));
      this.tiles[tileId].pivot.x = this.tiles[tileId].pivot.y = 32;
      this.tiles[tileId].position.x = (tile.x * this.tileSize) + 32;
      this.tiles[tileId].position.y = (tile.y * this.tileSize) + 32;
      this.tiles[tileId].scale.x = this.tiles[tileId].scale.y = this.tiles[tileId].alpha = 1;
      this.tileHolder.addChild(this.tiles[tileId]);
      this.tiles[tileId].interactive = true;
      this.tiles[tileId].mousedown = this.tileClick;
    } else if (this.texManager.getTexture(tile.state) !== this.tiles[tileId].texture) {
      this.tiles[tileId].scale.x = this.tiles[tileId].scale.y = this.tiles[tileId].alpha = 1;
      this.tiles[tileId].setTexture(this.texManager.getTexture(tile.state));
    } else if (tile.state === 'falling' && tile.falling && this.tiles[tileId].scale.x === 1) {
      TweenMax.to(this.tiles[tileId].scale, 0.5, {
        x: 0.2,
        y: 0.2,
        ease: Power2.easeOut
      });
      TweenMax.to(this.tiles[tileId], 0.5, {
        alpha: 0,
        ease: Power2.easeOut
      });
    } else if (tile.state === 'falling' && !tile.falling && this.tiles[tileId].scale.x !== 1) {
      this.tiles[tileId].scale.x = this.tiles[tileId].scale.y = this.tiles[tileId].alpha = 1;
    }
    return this.tiles[tileId];
  };

  GameRenderer.prototype.tileClick = function(e) {
    var curState, xPos, yPos;
    if (!window.app.editMode) {
      return;
    }
    xPos = Math.floor(e.target.position.x / 64);
    yPos = Math.floor(e.target.position.y / 64);
    if (this.editState !== 'pickup') {
      curState = this.grid.tiles[xPos][yPos].state;
      this.grid.tiles[xPos][yPos].state = this.editState;
    } else {
      this.grid.tiles[xPos][yPos].pickup = !this.grid.tiles[xPos][yPos].pickup;
    }
    return null;
  };

  return GameRenderer;

})();

GameGrid = (function() {
  GameGrid.prototype.gridWidth = 10;

  GameGrid.prototype.gridHeight = 10;

  GameGrid.prototype.player = null;

  GameGrid.prototype.tiles = null;

  GameGrid.prototype.pickups = null;

  GameGrid.prototype.tilesToDrop = 0;

  GameGrid.prototype.exits = false;

  GameGrid.prototype.complete = false;

  GameGrid.prototype.currentLevel = null;

  GameGrid.prototype.exitPos = {
    x: 0,
    y: 0
  };

  function GameGrid(completeCallback) {
    this.completeCallback = completeCallback;
    this.getLevelData = __bind(this.getLevelData, this);
    this.nextTileSafe = __bind(this.nextTileSafe, this);
    this.update = __bind(this.update, this);
    this.openExits = __bind(this.openExits, this);
    this.checkExit = __bind(this.checkExit, this);
    this.checkPickup = __bind(this.checkPickup, this);
    this.checkJump = __bind(this.checkJump, this);
    this.checkFloor = __bind(this.checkFloor, this);
    this.checkDropTile = __bind(this.checkDropTile, this);
    this.checkLeaving = __bind(this.checkLeaving, this);
    this.checkLanding = __bind(this.checkLanding, this);
    this.createGrid = __bind(this.createGrid, this);
    this.clearCurrentLevel = __bind(this.clearCurrentLevel, this);
    this.player = new GamePlayer(this, 0, 0);
  }

  GameGrid.prototype.clearCurrentLevel = function() {
    this.tiles = null;
    this.pickups = null;
    this.exits = false;
    this.complete = false;
    return null;
  };

  GameGrid.prototype.createGrid = function(level) {
    var i, j, _i, _j, _ref, _ref1;
    if (this.currentLevel !== null) {
      this.clearCurrentLevel();
    }
    this.currentLevel = level;
    this.tiles = [];
    this.pickups = [];
    this.tilesToDrop = 0;
    for (i = _i = 0, _ref = this.gridWidth - 1; _i <= _ref; i = _i += 1) {
      this.tiles[i] = [];
      for (j = _j = 0, _ref1 = this.gridHeight - 1; _j <= _ref1; j = _j += 1) {
        this.tiles[i][j] = new GameTile(i, j);
        if (this.currentLevel[i + '_' + j]) {
          this.tiles[i][j].state = this.currentLevel[i + '_' + j];
          if (this.tiles[i][j].state === 'falling') {
            this.tilesToDrop++;
          }
          if (this.tiles[i][j].state === 'exit_open' || this.tiles[i][j].state === 'exit_closed') {
            this.tiles[i][j].state = 'exit_closed';
            this.exitPos.x = i;
            this.exitPos.y = j;
          }
          if (this.currentLevel.pickups[i + '_' + j]) {
            this.tiles[i][j].pickup = true;
            this.pickups.push(i + '_' + j);
          }
        }
      }
    }
    this.numPickups = this.pickups.length;
    this.player.toStartPosition(this.currentLevel.startPos.x, this.currentLevel.startPos.y);
    return null;
  };

  GameGrid.prototype.checkLanding = function(x, y) {
    if (window.app.editMode) {
      return;
    }
    this.checkFloor(x, y);
    this.checkPickup(x, y);
    this.checkJump(x, y);
    if (this.exits) {
      this.checkExit(x, y);
    }
    return null;
  };

  GameGrid.prototype.checkLeaving = function(x, y) {
    if (window.app.editMode) {
      return;
    }
    this.checkDropTile(x, y);
    return null;
  };

  GameGrid.prototype.checkDropTile = function(x, y) {
    if (this.tiles[x][y].state === 'falling') {
      this.tiles[x][y].falling = true;
      this.tilesToDrop--;
    }
    return null;
  };

  GameGrid.prototype.checkFloor = function(x, y) {
    if (this.tiles[x][y].state === 'normal') {
      this.player.fall();
    } else if (this.tiles[x][y].state === 'falling' && this.tiles[x][y].falling) {
      this.player.fall();
    }
    return null;
  };

  GameGrid.prototype.checkJump = function(x, y) {
    if (this.tiles[x][y].state === 'jump') {
      this.player.jump();
    }
    return null;
  };

  GameGrid.prototype.checkPickup = function(x, y) {
    var i;
    if (this.complete) {
      return;
    }
    i = this.pickups.indexOf(x + '_' + y);
    if (i !== -1) {
      this.tiles[x][y].pickup = false;
      this.numPickups--;
      this.pickups.splice(i, 1);
    }
    if (this.numPickups === 0) {
      this.openExits();
    }
    return null;
  };

  GameGrid.prototype.checkExit = function(x, y) {
    if (this.complete) {
      return;
    }
    if (x === this.exitPos.x && y === this.exitPos.y) {
      this.complete = true;
      this.completeCallback();
    }
    return null;
  };

  GameGrid.prototype.openExits = function() {
    this.exits = true;
    this.tiles[this.exitPos.x][this.exitPos.y].state = 'exit_open';
    return null;
  };

  GameGrid.prototype.update = function() {
    var moveDir, newx, newy;
    if (this.complete) {
      return;
    }
    if (!this.player.isMoving) {
      moveDir = {
        x: 0,
        y: 0
      };
      if (window.app.leftPressed) {
        moveDir.x -= 1;
        window.app.leftPressed = false;
      }
      if (window.app.rightPressed) {
        moveDir.x += 1;
        window.app.rightPressed = false;
      }
      if (window.app.upPressed) {
        moveDir.y -= 1;
        window.app.upPressed = false;
      }
      if (window.app.downPressed) {
        moveDir.y += 1;
        window.app.downPressed = false;
      }
      if (moveDir.x !== 0 || moveDir.y !== 0) {
        newx = this.player.x + moveDir.x;
        newy = this.player.y + moveDir.y;
        if (!this.nextTileSafe(newx, newy) && !window.app.editMode) {
          moveDir.x = moveDir.y = 0;
        } else {
          this.player.move(moveDir.x, moveDir.y);
        }
      }
    }
    return null;
  };

  GameGrid.prototype.nextTileSafe = function(x, y) {
    var id;
    id = x + '_' + y;
    if (!this.currentLevel[id]) {
      return false;
    } else if (this.currentLevel[id] === 'falling' && this.tiles[x][y].falling) {
      return false;
    } else {
      return true;
    }
  };

  GameGrid.prototype.getLevelData = function() {
    var i, j, obj, pickups, startPos, _i, _j, _ref, _ref1;
    obj = {};
    pickups = {};
    startPos = {
      x: this.player.x,
      y: this.player.y
    };
    for (i = _i = 0, _ref = this.gridWidth - 1; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = this.gridHeight - 1; _j <= _ref1; j = _j += 1) {
        if (this.tiles[i][j].state !== 'normal') {
          obj[i + '_' + j] = this.tiles[i][j].state;
        }
        if (this.tiles[i][j].pickup) {
          pickups[i + '_' + j] = true;
        }
      }
    }
    obj.pickups = pickups;
    obj.startPos = startPos;
    return obj;
  };

  return GameGrid;

})();

GamePlayer = (function() {
  GamePlayer.prototype.lastMove = null;

  GamePlayer.prototype.falling = false;

  GamePlayer.prototype.scale = 1;

  function GamePlayer(grid, x, y) {
    this.grid = grid;
    this.x = x;
    this.y = y;
    this.jump = __bind(this.jump, this);
    this.fall = __bind(this.fall, this);
    this.toStartPosition = __bind(this.toStartPosition, this);
    this.doMove = __bind(this.doMove, this);
    this.move = __bind(this.move, this);
    this.isMoving = false;
  }

  GamePlayer.prototype.move = function(xmov, ymov) {
    var newx, newy;
    this.lastMove = {
      x: xmov,
      y: ymov
    };
    console.log('MOVING ' + this.lastMove);
    this.isMoving = true;
    newx = this.x + xmov;
    newy = this.y + ymov;
    if (newx < 0) {
      newx = 0;
    } else if (newx > this.grid.gridWidth - 1) {
      newx = this.grid.gridWidth - 1;
    }
    if (newy < 0) {
      newy = 0;
    } else if (newy > this.grid.gridHeight - 1) {
      newy = this.grid.gridHeight - 1;
    }
    if (newx !== this.x || newy !== this.y) {
      this.isMoving = true;
      this.doMove(newx, newy, false);
    } else {
      this.isMoving = false;
    }
    return null;
  };

  GamePlayer.prototype.doMove = function(x, y, isJump) {
    var time,
      _this = this;
    time = isJump ? 1 : 0.15;
    if (isJump) {
      TweenMax.to(this, time * 0.5, {
        scale: 1.5,
        ease: Power2.easeOut,
        onComplete: function() {
          return TweenMax.to(_this, time * 0.5, {
            scale: 1,
            ease: Power2.easeIn
          });
        }
      });
    }
    this.grid.checkLeaving(this.x, this.y);
    TweenMax.to(this, time, {
      x: x,
      y: y,
      ease: Power2.easeOut,
      onComplete: function() {
        _this.grid.checkLanding(x, y);
        return _this.isMoving = false;
      }
    });
    return null;
  };

  GamePlayer.prototype.toStartPosition = function(x, y) {
    this.x = x;
    this.y = y;
    return null;
  };

  GamePlayer.prototype.fall = function() {
    this.falling = true;
    return null;
  };

  GamePlayer.prototype.jump = function() {
    var newx, newy;
    this.isMoving = true;
    newx = this.x + (this.lastMove.x * 2);
    newy = this.y + (this.lastMove.y * 2);
    this.doMove(newx, newy, true);
    return null;
  };

  return GamePlayer;

})();

GameTextures = (function() {
  GameTextures.prototype.textures = {};

  function GameTextures(images) {
    var arr, img, _i, _len, _ref;
    this.images = images;
    this.getTexture = __bind(this.getTexture, this);
    this.prepareTextures = __bind(this.prepareTextures, this);
    this.load = __bind(this.load, this);
    arr = [];
    _ref = this.images;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      arr.push(img.url);
    }
    this.loader = new PIXI.AssetLoader(arr);
  }

  GameTextures.prototype.load = function(onComplete) {
    this.onComplete = onComplete;
    this.loader.onComplete = this.prepareTextures;
    this.loader.load();
    return null;
  };

  GameTextures.prototype.prepareTextures = function() {
    var img, _i, _len, _ref;
    _ref = this.images;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      this.textures[img.id] = PIXI.Texture.fromImage(img.url);
    }
    this.onComplete();
    return null;
  };

  GameTextures.prototype.getTexture = function(id) {
    return this.textures[id];
  };

  return GameTextures;

})();

GameTile = (function() {
  GameTile.prototype.pickup = false;

  GameTile.prototype.falling = false;

  function GameTile(x, y) {
    this.x = x;
    this.y = y;
    this.state = 'normal';
  }

  return GameTile;

})();

Levels = (function() {
  function Levels() {}

  Levels.EmptyLevel = {
    pickups: {},
    startPos: {
      x: 0,
      y: 0
    }
  };

  Levels.LevelOne = {
    pickups: {
      "3_6": "true",
      "5_4": "true",
      "7_2": "true"
    },
    startPos: {
      x: 3,
      y: 2
    },
    "1_5": "falling",
    "1_6": "falling",
    "1_7": "falling",
    "2_7": "falling",
    "3_2": "corner",
    "3_4": "metal",
    "3_5": "jump",
    "3_6": "falling",
    "3_7": "metal",
    "4_2": "metal",
    "4_4": "metal",
    "4_5": "metal",
    "4_7": "falling",
    "5_2": "metal",
    "5_4": "metal",
    "5_7": "falling",
    "6_2": "metal",
    "6_7": "falling",
    "7_2": "metal",
    "7_4": "jump",
    "7_7": "falling",
    "8_2": "metal",
    "8_3": "metal",
    "8_4": "metal",
    "8_7": "exit_open"
  };

  Levels.LevelTwo = {
    pickups: {
      "4_3": "true",
      "4_7": "true"
    },
    startPos: {
      x: 1,
      y: 3
    },
    "1_3": "corner",
    "1_7": "exit_closed",
    "2_3": "metal",
    "2_7": "metal",
    "3_3": "metal",
    "3_4": "metal",
    "3_7": "metal",
    "4_3": "metal",
    "4_4": "jump",
    "4_7": "metal",
    "5_3": "metal",
    "5_7": "metal",
    "6_3": "metal",
    "6_4": "jump",
    "6_6": "metal",
    "6_7": "metal",
    "7_6": "falling",
    "8_4": "falling",
    "8_5": "falling",
    "8_6": "falling"
  };

  Levels.LevelThree = {
    pickups: {
      "4_4": "true",
      "7_4": "true",
      "7_7": "true"
    },
    startPos: {
      x: 1,
      y: 3
    },
    "1_3": "corner",
    "1_7": "exit_closed",
    "2_3": "metal",
    "2_7": "falling",
    "3_3": "jump",
    "3_7": "falling",
    "4_4": "falling",
    "4_5": "falling",
    "4_6": "falling",
    "4_7": "falling",
    "5_3": "jump",
    "6_2": "metal",
    "6_3": "metal",
    "6_4": "jump",
    "6_6": "metal",
    "6_7": "metal",
    "7_3": "falling",
    "7_4": "metal",
    "7_6": "jump",
    "7_7": "metal"
  };

  Levels.LevelFour = {
    pickups: {
      "1_3": "true",
      "4_2": "true",
      "8_7": "true"
    },
    startPos: {
      x: 4,
      y: 8
    },
    "1_3": "metal",
    "1_4": "metal",
    "1_5": "metal",
    "2_3": "metal",
    "2_5": "jump",
    "3_3": "metal",
    "3_4": "metal",
    "3_6": "jump",
    "3_7": "metal",
    "4_1": "exit_open",
    "4_2": "metal",
    "4_4": "jump",
    "4_5": "jump",
    "4_6": "jump",
    "4_7": "metal",
    "4_8": "corner",
    "5_4": "metal",
    "5_6": "jump",
    "5_7": "metal",
    "6_5": "metal",
    "6_6": "falling",
    "6_7": "falling",
    "7_5": "metal",
    "7_6": "falling",
    "7_7": "jump",
    "8_6": "falling",
    "8_7": "metal"
  };

  Levels.LevelFive = {
    pickups: {
      "2_4": "true",
      "4_4": "true",
      "4_7": "true",
      "7_4": "true"
    },
    startPos: {
      x: 4,
      y: 0
    },
    "2_3": "falling",
    "2_4": "metal",
    "2_5": "falling",
    "3_3": "metal",
    "3_5": "metal",
    "4_0": "corner",
    "4_1": "jump",
    "4_3": "falling",
    "4_4": "metal",
    "4_5": "jump",
    "4_7": "jump",
    "4_9": "exit_open",
    "5_3": "metal",
    "5_5": "metal",
    "6_3": "falling",
    "6_4": "jump",
    "6_5": "falling",
    "7_3": "metal",
    "7_4": "metal",
    "7_5": "metal"
  };

  Levels.LevelSix = {
    pickups: {
      "3_3": "true",
      "3_6": "true",
      "6_3": "true",
      "6_6": "true"
    },
    startPos: {
      x: 4,
      y: 1
    },
    "3_3": "falling",
    "3_4": "jump",
    "3_5": "metal",
    "3_6": "falling",
    "4_1": "corner",
    "4_2": "jump",
    "4_3": "falling",
    "4_4": "metal",
    "4_5": "falling",
    "4_6": "jump",
    "5_3": "jump",
    "5_4": "falling",
    "5_5": "falling",
    "5_6": "metal",
    "6_3": "falling",
    "6_4": "metal",
    "6_5": "jump",
    "6_6": "falling",
    "7_3": "metal",
    "7_4": "jump",
    "7_6": "exit_closed"
  };

  Levels.LevelSeven = {
    pickups: {
      "0_8": "true",
      "1_2": "true",
      "1_5": "true",
      "4_4": "true",
      "5_2": "true",
      "5_8": "true",
      "8_2": "true",
      "8_8": "true"
    },
    startPos: {
      x: 1,
      y: 8
    },
    "0_5": "metal",
    "0_8": "falling",
    "1_1": "metal",
    "1_2": "falling",
    "1_4": "jump",
    "1_5": "metal",
    "1_7": "jump",
    "1_8": "corner",
    "2_1": "metal",
    "2_5": "jump",
    "2_8": "jump",
    "3_1": "jump",
    "4_2": "metal",
    "4_4": "falling",
    "4_5": "falling",
    "4_8": "jump",
    "5_1": "metal",
    "5_2": "falling",
    "5_4": "falling",
    "5_5": "jump",
    "5_7": "falling",
    "5_8": "falling",
    "6_2": "jump",
    "6_7": "jump",
    "7_8": "jump",
    "7_9": "metal",
    "8_2": "falling",
    "8_3": "metal",
    "8_4": "metal",
    "8_5": "jump",
    "8_7": "exit_open",
    "8_8": "falling"
  };

  Levels.LevelEight = {
    pickups: {
      "1_1": "true",
      "3_3": "true",
      "3_6": "true",
      "6_3": "true",
      "6_6": "true",
      "8_8": "true"
    },
    startPos: {
      x: 6,
      y: 1
    },
    "1_1": "metal",
    "1_2": "metal",
    "1_3": "metal",
    "1_4": "metal",
    "1_5": "metal",
    "1_6": "metal",
    "1_7": "falling",
    "1_8": "exit_open",
    "2_1": "falling",
    "2_6": "falling",
    "2_8": "falling",
    "3_1": "metal",
    "3_2": "falling",
    "3_3": "metal",
    "3_4": "falling",
    "3_5": "metal",
    "3_6": "metal",
    "3_8": "metal",
    "4_1": "metal",
    "4_3": "metal",
    "4_6": "falling",
    "4_8": "metal",
    "5_1": "metal",
    "5_3": "falling",
    "5_6": "metal",
    "5_8": "metal",
    "6_1": "corner",
    "6_3": "metal",
    "6_4": "metal",
    "6_5": "falling",
    "6_6": "metal",
    "6_7": "falling",
    "6_8": "metal",
    "7_1": "metal",
    "7_3": "falling",
    "7_8": "falling",
    "8_1": "falling",
    "8_2": "metal",
    "8_3": "metal",
    "8_4": "metal",
    "8_5": "metal",
    "8_6": "metal",
    "8_7": "metal",
    "8_8": "metal"
  };

  Levels.LevelNine = {
    pickups: {
      "0_1": "true",
      "0_8": "true",
      "3_3": "true",
      "6_5": "true",
      "9_7": "true"
    },
    startPos: {
      x: 2,
      y: 1
    },
    "0_0": "metal",
    "0_1": "metal",
    "0_2": "metal",
    "0_7": "metal",
    "0_8": "falling",
    "0_9": "metal",
    "1_0": "falling",
    "1_2": "falling",
    "1_3": "metal",
    "1_4": "metal",
    "1_5": "metal",
    "1_6": "metal",
    "1_7": "metal",
    "1_9": "metal",
    "2_0": "metal",
    "2_1": "corner",
    "2_2": "metal",
    "2_7": "metal",
    "2_8": "falling",
    "2_9": "metal",
    "3_3": "metal",
    "3_4": "metal",
    "3_5": "metal",
    "3_6": "metal",
    "3_8": "metal",
    "4_3": "metal",
    "4_5": "metal",
    "4_6": "falling",
    "4_7": "falling",
    "4_8": "metal",
    "5_3": "falling",
    "5_4": "metal",
    "5_6": "metal",
    "5_8": "falling",
    "6_0": "metal",
    "6_1": "falling",
    "6_2": "metal",
    "6_3": "metal",
    "6_4": "metal",
    "6_5": "metal",
    "6_6": "metal",
    "6_8": "falling",
    "7_0": "jump",
    "7_6": "falling",
    "7_7": "falling",
    "7_8": "metal",
    "7_9": "metal",
    "8_9": "metal",
    "9_0": "exit_open",
    "9_1": "metal",
    "9_3": "jump",
    "9_5": "jump",
    "9_7": "jump",
    "9_8": "falling",
    "9_9": "metal"
  };

  Levels.LevelTen = {
    pickups: {
      "2_7": "true",
      "3_3": "true",
      "6_6": "true",
      "7_2": "true"
    },
    startPos: {
      x: 1,
      y: 1
    },
    "1_1": "corner",
    "1_2": "falling",
    "1_3": "metal",
    "1_4": "metal",
    "1_5": "metal",
    "1_6": "metal",
    "2_1": "falling",
    "2_2": "falling",
    "2_6": "falling",
    "2_7": "falling",
    "3_1": "metal",
    "3_3": "metal",
    "3_4": "metal",
    "3_5": "metal",
    "3_6": "falling",
    "3_7": "falling",
    "3_8": "metal",
    "4_1": "metal",
    "4_3": "metal",
    "4_6": "metal",
    "4_8": "metal",
    "5_1": "metal",
    "5_3": "falling",
    "5_6": "metal",
    "5_8": "metal",
    "6_1": "metal",
    "6_2": "metal",
    "6_3": "metal",
    "6_4": "falling",
    "6_5": "metal",
    "6_6": "metal",
    "6_7": "falling",
    "6_8": "metal",
    "7_2": "falling",
    "7_3": "metal",
    "7_7": "exit_open",
    "7_8": "falling",
    "8_3": "metal",
    "8_4": "metal",
    "8_5": "metal",
    "8_6": "metal",
    "8_7": "falling"
  };

  Levels.LevelEleven = {
    pickups: {
      "1_1": "true",
      "2_6": "true",
      "4_2": "true",
      "7_5": "true",
      "8_2": "true",
      "8_8": "true"
    },
    startPos: {
      x: 2,
      y: 7
    },
    "1_1": "falling",
    "1_2": "metal",
    "2_0": "metal",
    "2_2": "jump",
    "2_3": "metal",
    "2_5": "jump",
    "2_6": "metal",
    "2_7": "corner",
    "3_0": "metal",
    "3_1": "jump",
    "3_7": "metal",
    "4_1": "metal",
    "4_2": "metal",
    "4_3": "jump",
    "4_4": "metal",
    "4_7": "jump",
    "5_1": "jump",
    "5_3": "metal",
    "5_4": "falling",
    "5_7": "jump",
    "6_7": "jump",
    "7_1": "jump",
    "7_2": "metal",
    "7_4": "jump",
    "7_5": "metal",
    "7_7": "jump",
    "7_8": "metal",
    "8_1": "metal",
    "8_2": "metal",
    "8_4": "metal",
    "8_5": "metal",
    "8_7": "metal",
    "8_8": "metal",
    "9_1": "exit_open"
  };

  Levels.LevelTwelve = {
    pickups: {
      "0_0": "true",
      "0_9": "true",
      "2_2": "true",
      "6_2": "true",
      "9_0": "true",
      "9_9": "true"
    },
    startPos: {
      x: 4,
      y: 0
    },
    "0_0": "metal",
    "0_1": "falling",
    "0_2": "falling",
    "0_3": "falling",
    "0_4": "falling",
    "0_5": "falling",
    "0_6": "falling",
    "0_7": "falling",
    "0_8": "falling",
    "0_9": "metal",
    "1_0": "metal",
    "1_9": "metal",
    "2_0": "metal",
    "2_2": "metal",
    "2_3": "metal",
    "2_5": "jump",
    "2_6": "metal",
    "2_8": "jump",
    "2_9": "falling",
    "3_0": "metal",
    "3_2": "jump",
    "3_3": "metal",
    "3_6": "metal",
    "3_7": "metal",
    "3_9": "metal",
    "4_0": "corner",
    "4_7": "falling",
    "4_9": "metal",
    "5_0": "exit_open",
    "5_7": "falling",
    "5_9": "metal",
    "6_0": "metal",
    "6_2": "metal",
    "6_3": "metal",
    "6_6": "metal",
    "6_7": "metal",
    "6_9": "metal",
    "7_0": "metal",
    "7_2": "jump",
    "7_3": "metal",
    "7_5": "jump",
    "7_6": "metal",
    "7_8": "jump",
    "7_9": "falling",
    "8_0": "metal",
    "8_9": "metal",
    "9_0": "metal",
    "9_1": "falling",
    "9_2": "falling",
    "9_3": "falling",
    "9_4": "falling",
    "9_5": "falling",
    "9_6": "falling",
    "9_7": "falling",
    "9_8": "falling",
    "9_9": "metal"
  };

  Levels.LevelThirteen = {
    pickups: {
      "3_3": "true",
      "3_6": "true",
      "6_3": "true",
      "6_6": "true"
    },
    startPos: {
      x: 0,
      y: 4
    },
    "0_3": "metal",
    "0_4": "corner",
    "0_5": "metal",
    "0_6": "metal",
    "1_3": "falling",
    "1_6": "falling",
    "2_3": "falling",
    "2_6": "falling",
    "3_3": "metal",
    "3_4": "falling",
    "3_5": "falling",
    "3_6": "metal",
    "4_3": "falling",
    "4_6": "falling",
    "5_3": "falling",
    "5_6": "falling",
    "6_3": "metal",
    "6_4": "falling",
    "6_5": "falling",
    "6_6": "metal",
    "7_3": "jump",
    "7_6": "jump",
    "9_3": "metal",
    "9_4": "falling",
    "9_5": "exit_open",
    "9_6": "metal"
  };

  Levels.LevelFourteen = {
    pickups: {
      "0_3": "true",
      "0_6": "true",
      "1_1": "true",
      "3_0": "true",
      "7_8": "true",
      "8_0": "true",
      "8_7": "true"
    },
    startPos: {
      x: 3,
      y: 3
    },
    "0_3": "metal",
    "0_4": "metal",
    "0_6": "falling",
    "0_7": "metal",
    "0_8": "metal",
    "1_1": "metal",
    "1_2": "metal",
    "1_3": "metal",
    "1_4": "jump",
    "1_6": "jump",
    "1_7": "metal",
    "1_8": "metal",
    "2_1": "metal",
    "2_8": "falling",
    "3_0": "metal",
    "3_1": "metal",
    "3_3": "corner",
    "3_4": "jump",
    "3_6": "jump",
    "3_8": "falling",
    "4_0": "metal",
    "4_1": "jump",
    "4_3": "jump",
    "4_5": "metal",
    "4_7": "metal",
    "4_8": "jump",
    "5_4": "metal",
    "5_5": "falling",
    "5_6": "metal",
    "6_0": "metal",
    "6_1": "jump",
    "6_3": "jump",
    "6_5": "metal",
    "6_6": "exit_closed",
    "6_8": "jump",
    "7_0": "metal",
    "7_1": "metal",
    "7_4": "metal",
    "7_8": "falling",
    "7_9": "falling",
    "8_0": "metal",
    "8_1": "metal",
    "8_2": "metal",
    "8_3": "falling",
    "8_4": "jump",
    "8_6": "jump",
    "8_7": "falling",
    "8_8": "metal",
    "8_9": "falling",
    "9_7": "falling",
    "9_8": "falling",
    "9_9": "falling"
  };

  Levels.LevelFifteen = {
    pickups: {
      "0_0": "true",
      "0_9": "true",
      "2_4": "true",
      "9_0": "true",
      "9_9": "true"
    },
    startPos: {
      x: 3,
      y: 4
    },
    "0_0": "metal",
    "0_1": "metal",
    "0_4": "falling",
    "0_5": "metal",
    "0_6": "jump",
    "0_8": "metal",
    "0_9": "metal",
    "1_0": "metal",
    "1_1": "metal",
    "1_2": "metal",
    "1_7": "metal",
    "1_8": "metal",
    "1_9": "metal",
    "2_1": "metal",
    "2_2": "jump",
    "2_4": "falling",
    "2_5": "jump",
    "2_7": "jump",
    "2_8": "metal",
    "3_0": "jump",
    "3_4": "corner",
    "3_5": "metal",
    "3_6": "falling",
    "4_0": "metal",
    "4_2": "jump",
    "4_3": "metal",
    "4_6": "metal",
    "4_7": "metal",
    "4_9": "falling",
    "5_0": "falling",
    "5_2": "metal",
    "5_3": "metal",
    "5_6": "metal",
    "5_7": "jump",
    "5_9": "metal",
    "6_3": "falling",
    "6_4": "metal",
    "6_5": "exit_open",
    "6_9": "jump",
    "7_1": "metal",
    "7_2": "jump",
    "7_4": "jump",
    "7_5": "metal",
    "7_7": "jump",
    "7_8": "metal",
    "8_0": "metal",
    "8_1": "metal",
    "8_2": "metal",
    "8_7": "metal",
    "8_8": "metal",
    "8_9": "metal",
    "9_0": "metal",
    "9_1": "metal",
    "9_3": "jump",
    "9_4": "metal",
    "9_5": "falling",
    "9_8": "metal",
    "9_9": "metal"
  };

  Levels.LevelSixteen = {
    pickups: {
      "2_2": "true",
      "2_7": "true",
      "7_2": "true",
      "7_7": "true"
    },
    startPos: {
      x: 4,
      y: 9
    },
    "1_4": "metal",
    "1_5": "metal",
    "2_2": "metal",
    "2_3": "metal",
    "2_4": "falling",
    "2_5": "falling",
    "2_6": "jump",
    "2_7": "metal",
    "3_2": "jump",
    "3_4": "metal",
    "3_5": "jump",
    "3_7": "metal",
    "4_1": "metal",
    "4_2": "falling",
    "4_3": "metal",
    "4_4": "metal",
    "4_5": "metal",
    "4_6": "metal",
    "4_7": "falling",
    "4_8": "jump",
    "4_9": "corner",
    "5_1": "exit_open",
    "5_2": "falling",
    "5_3": "jump",
    "5_4": "metal",
    "5_5": "metal",
    "5_6": "jump",
    "5_7": "falling",
    "5_8": "metal",
    "6_2": "metal",
    "6_4": "metal",
    "6_5": "jump",
    "6_7": "metal",
    "7_2": "metal",
    "7_3": "jump",
    "7_4": "falling",
    "7_5": "falling",
    "7_6": "metal",
    "7_7": "metal",
    "8_4": "metal",
    "8_5": "metal"
  };

  Levels.LevelSeventeen = {
    pickups: {
      "1_1": "true",
      "1_8": "true",
      "8_1": "true",
      "8_8": "true"
    },
    startPos: {
      x: 5,
      y: 5
    },
    "1_1": "metal",
    "1_2": "metal",
    "1_3": "metal",
    "1_5": "metal",
    "1_6": "jump",
    "1_7": "metal",
    "1_8": "metal",
    "2_1": "metal",
    "2_3": "falling",
    "2_8": "metal",
    "3_1": "jump",
    "3_3": "metal",
    "3_5": "jump",
    "3_6": "metal",
    "3_7": "falling",
    "3_8": "metal",
    "4_3": "metal",
    "4_4": "exit_open",
    "4_5": "metal",
    "5_1": "falling",
    "5_4": "metal",
    "5_5": "corner",
    "5_6": "metal",
    "6_1": "metal",
    "6_2": "falling",
    "6_3": "metal",
    "6_4": "metal",
    "6_6": "metal",
    "6_8": "jump",
    "7_1": "metal",
    "7_6": "falling",
    "7_8": "metal",
    "8_1": "metal",
    "8_2": "metal",
    "8_3": "jump",
    "8_5": "metal",
    "8_6": "metal",
    "8_7": "metal",
    "8_8": "metal"
  };

  Levels.LevelEighteen = {
    pickups: {
      "1_1": "true",
      "1_8": "true",
      "8_1": "true",
      "8_8": "true"
    },
    startPos: {
      x: 5,
      y: 4
    },
    "1_1": "metal",
    "1_2": "metal",
    "1_3": "jump",
    "1_5": "falling",
    "1_6": "metal",
    "1_7": "metal",
    "1_8": "metal",
    "2_1": "metal",
    "2_2": "metal",
    "2_6": "metal",
    "2_8": "metal",
    "3_1": "falling",
    "3_2": "metal",
    "3_3": "metal",
    "3_6": "jump",
    "3_8": "metal",
    "4_3": "metal",
    "4_4": "metal",
    "4_8": "metal",
    "5_1": "jump",
    "5_4": "corner",
    "5_5": "metal",
    "5_6": "metal",
    "5_7": "falling",
    "5_8": "falling",
    "6_1": "metal",
    "6_3": "metal",
    "6_6": "exit_open",
    "6_8": "jump",
    "7_1": "metal",
    "7_3": "metal",
    "7_8": "metal",
    "8_1": "metal",
    "8_2": "metal",
    "8_3": "metal",
    "8_4": "falling",
    "8_6": "jump",
    "8_7": "metal",
    "8_8": "metal"
  };

  Levels.LevelNineteen = {
    pickups: {
      "1_1": "true",
      "1_8": "true",
      "8_1": "true",
      "8_8": "true"
    },
    startPos: {
      x: 0,
      y: 0
    },
    "0_0": "corner",
    "0_1": "falling",
    "0_7": "metal",
    "0_8": "metal",
    "1_0": "falling",
    "1_1": "metal",
    "1_2": "metal",
    "1_3": "metal",
    "1_4": "metal",
    "1_5": "metal",
    "1_6": "jump",
    "1_7": "jump",
    "1_8": "metal",
    "2_1": "metal",
    "3_1": "metal",
    "3_3": "jump",
    "3_4": "falling",
    "3_5": "metal",
    "3_7": "falling",
    "3_8": "metal",
    "4_1": "metal",
    "4_3": "falling",
    "4_4": "exit_open",
    "4_5": "falling",
    "4_6": "falling",
    "4_7": "falling",
    "5_1": "metal",
    "5_3": "metal",
    "5_4": "falling",
    "5_5": "jump",
    "5_7": "jump",
    "5_8": "metal",
    "6_1": "jump",
    "6_7": "metal",
    "6_8": "falling",
    "7_0": "metal",
    "7_1": "jump",
    "7_3": "falling",
    "7_4": "jump",
    "7_5": "metal",
    "7_6": "metal",
    "7_7": "metal",
    "7_8": "falling",
    "8_0": "metal",
    "8_1": "metal",
    "8_3": "metal",
    "8_4": "metal",
    "8_7": "falling",
    "8_8": "metal"
  };

  Levels.LevelTwenty = {
    pickups: {
      "1_0": "true",
      "1_8": "true",
      "3_3": "true",
      "3_6": "true",
      "6_3": "true",
      "6_6": "true",
      "9_0": "true",
      "9_8": "true"
    },
    startPos: {
      x: 0,
      y: 0
    },
    "0_0": "corner",
    "1_0": "falling",
    "1_1": "falling",
    "1_2": "falling",
    "1_3": "falling",
    "1_4": "falling",
    "1_5": "falling",
    "1_6": "falling",
    "1_7": "falling",
    "1_8": "falling",
    "2_0": "falling",
    "2_1": "falling",
    "2_8": "falling",
    "3_0": "falling",
    "3_1": "falling",
    "3_3": "falling",
    "3_4": "falling",
    "3_5": "falling",
    "3_6": "falling",
    "3_8": "falling",
    "4_0": "falling",
    "4_1": "falling",
    "4_3": "falling",
    "4_6": "falling",
    "4_8": "falling",
    "5_0": "falling",
    "5_1": "falling",
    "5_3": "falling",
    "5_6": "falling",
    "5_8": "falling",
    "6_0": "falling",
    "6_1": "falling",
    "6_3": "falling",
    "6_4": "falling",
    "6_5": "falling",
    "6_6": "falling",
    "6_7": "falling",
    "6_8": "falling",
    "7_0": "falling",
    "7_1": "falling",
    "7_5": "falling",
    "7_6": "falling",
    "7_7": "falling",
    "7_8": "falling",
    "8_0": "falling",
    "8_1": "falling",
    "8_2": "falling",
    "8_3": "falling",
    "8_4": "falling",
    "8_5": "falling",
    "8_6": "falling",
    "8_7": "falling",
    "8_8": "falling",
    "9_0": "falling",
    "9_1": "falling",
    "9_2": "falling",
    "9_3": "falling",
    "9_4": "falling",
    "9_5": "falling",
    "9_6": "falling",
    "9_7": "falling",
    "9_8": "falling",
    "9_9": "exit_open"
  };

  Levels.Levels = [Levels.LevelTwo, Levels.LevelOne, Levels.LevelThree, Levels.LevelFour, Levels.LevelFive, Levels.LevelSix, Levels.LevelSeven, Levels.LevelEight, Levels.LevelNine, Levels.LevelTen, Levels.LevelEleven, Levels.LevelTwelve, Levels.LevelThirteen, Levels.LevelFourteen, Levels.LevelFifteen, Levels.LevelSixteen, Levels.LevelSeventeen, Levels.LevelEighteen, Levels.LevelNineteen, Levels.LevelTwenty];

  return Levels;

})();

App = (function() {
  App.prototype.renderer = null;

  App.prototype.textures = null;

  App.prototype.upPressed = false;

  App.prototype.downPressed = false;

  App.prototype.leftPressed = false;

  App.prototype.rightPressed = false;

  App.prototype.topMargin = 0;

  App.prototype.leftMargin = 0;

  App.prototype.editMode = false;

  App.prototype.editStates = ['normal', 'metal', 'corner', 'exit_open', 'jump', 'falling'];

  App.prototype.levels = null;

  App.prototype.currentLevel = 0;

  App.prototype.leftDigit = null;

  App.prototype.rightDigit = null;

  App.prototype.gameScale = 1;

  App.prototype.lights = true;

  App.prototype.perfect = true;

  App.prototype.menuOpen = true;

  App.prototype.overOpen = false;

  function App() {
    this.parseLevelData = __bind(this.parseLevelData, this);
    this.reset = __bind(this.reset, this);
    this.parseCurrentLevel = __bind(this.parseCurrentLevel, this);
    this.toggleEditMode = __bind(this.toggleEditMode, this);
    this.handleKeyRelease = __bind(this.handleKeyRelease, this);
    this.handleKeyPress = __bind(this.handleKeyPress, this);
    this.handleTouch = __bind(this.handleTouch, this);
    this.update = __bind(this.update, this);
    this.replayClicked = __bind(this.replayClicked, this);
    this.showGameComplete = __bind(this.showGameComplete, this);
    this.levelComplete = __bind(this.levelComplete, this);
    this.updateDigits = __bind(this.updateDigits, this);
    this.updateLights = __bind(this.updateLights, this);
    this.nextClicked = __bind(this.nextClicked, this);
    this.resize = __bind(this.resize, this);
    this.init = __bind(this.init, this);
    this.startClick = __bind(this.startClick, this);
    var images;
    images = [
      {
        url: 'img/pickup_01.png',
        id: 'pickup_01'
      }, {
        url: 'img/pickup_02.png',
        id: 'pickup_02'
      }, {
        url: 'img/pickup_03.png',
        id: 'pickup_03'
      }, {
        url: 'img/pickup_04.png',
        id: 'pickup_04'
      }, {
        url: 'img/pickup_05.png',
        id: 'pickup_05'
      }, {
        url: 'img/tile-exit-closed.jpg',
        id: 'exit_closed'
      }, {
        url: 'img/tile-exit-open.jpg',
        id: 'exit_open'
      }, {
        url: 'img/bg.jpg',
        id: 'bg'
      }, {
        url: 'img/falling-tile.jpg',
        id: 'falling'
      }, {
        url: 'img/metal-tile.jpg',
        id: 'metal'
      }, {
        url: 'img/corner-tile.jpg',
        id: 'corner'
      }, {
        url: 'img/plain-tile.png',
        id: 'normal'
      }, {
        url: 'img/jump-tile.jpg',
        id: 'jump'
      }, {
        url: 'img/player-down.png',
        id: 'player-down'
      }, {
        url: 'img/player-up.png',
        id: 'player-up'
      }, {
        url: 'img/player-left.png',
        id: 'player-left'
      }, {
        url: 'img/player-right.png',
        id: 'player-right'
      }, {
        url: 'img/touch-screen.jpg',
        id: 'touch-screen'
      }, {
        url: 'img/keyboard-screen.jpg',
        id: 'keyboard-screen'
      }
    ];
    this.textures = new GameTextures(images);
    this.textures.load(this.init);
    $('#next-button').bind('click touchstart', this.nextClicked);
    this.menu = $('#game-menu-holder');
    this.over = $('#game-over-holder');
    $('#game-over-holder').css('opacity', '0').remove();
  }

  App.prototype.startClick = function() {
    var _this = this;
    TweenMax.to($('#start-screen'), 0.5, {
      css: {
        opacity: 0
      },
      ease: Power4.easeOut,
      onComplete: function() {
        return $('#start-screen').remove();
      }
    });
    return null;
  };

  App.prototype.init = function() {
    $('#start-screen').html('');
    if (Modernizr.touch) {
      $('#start-screen').css('background', 'url("img/touch-screen.jpg") 0 0 no-repeat');
    } else {
      $('#start-screen').css('background', 'url("img/keyboard-screen.jpg") 0 0 no-repeat');
    }
    $('#start-screen').bind('click touchstart', this.startClick);
    this.leftDigit = $('#digit_0');
    this.rightDigit = $('#digit_1');
    this.levels = Levels.Levels;
    this.updateDigits();
    this.grid = new GameGrid(this.levelComplete);
    this.grid.createGrid(this.levels[this.currentLevel]);
    this.renderer = new GameRenderer(document.getElementById('canvas-holder'));
    window.onresize = this.resize;
    this.resize();
    if (Modernizr.touch) {
      this.renderer.renderer.view.addEventListener('touchstart', this.handleTouch, false);
    } else {
      window.onkeydown = this.handleKeyPress;
      window.onkeyup = this.handleKeyRelease;
    }
    requestAnimationFrame(this.update);
    return null;
  };

  App.prototype.resize = function() {
    var minScale;
    if (window.innerWidth < 640 || window.innerHeight < 640) {
      minScale = window.innerWidth / 640;
      if (window.innerHeight / 640 < minScale) {
        minScale = window.innerHeight / 640;
      }
      this.gameScale = minScale;
    } else {
      this.gameScale = 1;
    }
    $('#game-holder').css('transform', 'scale(' + this.gameScale + ', ' + this.gameScale + ')');
    return null;
  };

  App.prototype.nextClicked = function() {
    var _this = this;
    $('#next-button').unbind('click touchstart', this.nextClicked);
    TweenMax.to(this.menu, 0.5, {
      css: {
        opacity: 0
      },
      ease: Power4.easeOut,
      onComplete: function() {
        _this.menuOpen = false;
        $('#game-menu-holder').remove();
        return _this.renderer.showLevel();
      }
    });
    return null;
  };

  App.prototype.updateLights = function() {
    if (this.lights) {
      $('#game-menu').css('background-position-y', '0');
      console.log('bg to 0');
    } else {
      $('#game-menu').css('background-position-y', '-512px');
      console.log('bg to -512');
    }
    return null;
  };

  App.prototype.updateDigits = function() {
    var lvl, t, u;
    lvl = this.currentLevel + 1;
    t = Math.floor(lvl / 10);
    u = lvl - (10 * t);
    $(this.leftDigit).css('background-position-y', -(t * 160) + 'px');
    $(this.rightDigit).css('background-position-y', -(u * 160) + 'px');
    return null;
  };

  App.prototype.levelComplete = function() {
    var _this = this;
    this.renderer.hideLevel(function() {
      if (_this.grid.tilesToDrop === 0) {
        _this.lights = true;
      } else {
        _this.lights = false;
      }
      if (!_this.lights) {
        _this.perfect = false;
      }
      _this.currentLevel++;
      if (_this.currentLevel === 20) {
        _this.showGameComplete();
        return;
      }
      _this.menuOpen = true;
      _this.updateDigits();
      _this.grid.createGrid(_this.levels[_this.currentLevel]);
      $('#game-holder').append(_this.menu);
      _this.updateLights();
      return TweenMax.to(_this.menu, 0.5, {
        css: {
          opacity: 1
        },
        ease: Power4.easeOut,
        onComplete: function() {
          return $('#next-button').bind('click touchstart', _this.nextClicked);
        }
      });
    });
    return null;
  };

  App.prototype.showGameComplete = function() {
    var bgPos,
      _this = this;
    bgPos = 0;
    if (this.perfect) {
      bgPos = -512;
    }
    $('#game-holder').append(this.over);
    $('#game-over').css('background-position-y', bgPos + 'px');
    TweenMax.to(this.over, 0.5, {
      css: {
        opacity: 1
      },
      ease: Power4.easeOut,
      onComplete: function() {
        return $('#replay-button').bind('click touchstart', _this.replayClicked);
      }
    });
    return null;
  };

  App.prototype.replayClicked = function() {
    var _this = this;
    $('#replay-button').unbind('click touchstart', this.replayClicked);
    TweenMax.to(this.over, 0.5, {
      css: {
        opacity: 0
      },
      ease: Power4.easeOut,
      onComplete: function() {
        _this.overOpen = false;
        $('#game-over-holder').remove();
        return _this.reset();
      }
    });
    return null;
  };

  App.prototype.update = function() {
    this.grid.update();
    this.renderer.render(this.grid);
    requestAnimationFrame(this.update);
    return null;
  };

  App.prototype.preloadImages = function() {
    var images;
    images = ['img/plain-tile.jpg'];
    this.loader = new PIXI.AssetLoader(images);
    this.loader.onComplete = this.init;
    this.loader.load();
    return null;
  };

  App.prototype.handleTouch = function(e) {
    var xFromCenter, xneg, yFromCenter, yneg;
    e.preventDefault();
    if (e.touches.length > 2) {
      this.reset();
      return;
    }
    xFromCenter = (320 * this.gameScale) - (e.touches[0].pageX - this.leftMargin);
    xneg = false;
    yneg = false;
    if (xFromCenter < 0) {
      xFromCenter *= -1;
      xneg = true;
    }
    yFromCenter = (320 * this.gameScale) - (e.touches[0].pageY - this.topMargin);
    if (yFromCenter < 0) {
      yFromCenter *= -1;
      yneg = true;
    }
    if (yFromCenter > xFromCenter) {
      if (yneg) {
        this.downPressed = true;
      } else {
        this.upPressed = true;
      }
    } else if (xneg) {
      this.rightPressed = true;
    } else {
      this.leftPressed = true;
    }
    return null;
  };

  App.prototype.handleKeyPress = function(e) {
    var unicode;
    if (this.menuOpen || this.overOpen) {
      return;
    }
    unicode = e.keyCode ? e.keyCode : e.charCode;
    if (unicode === 37 || unicode === 65) {
      this.leftPressed = true;
    }
    if (unicode === 39 || unicode === 68) {
      this.rightPressed = true;
    }
    if (unicode === 38 || unicode === 87) {
      this.upPressed = true;
    }
    if (unicode === 40 || unicode === 83) {
      this.downPressed = true;
    }
    return null;
  };

  App.prototype.handleKeyRelease = function(e) {
    var unicode;
    unicode = e.keyCode ? e.keyCode : e.charCode;
    if (this.menuOpen || this.overOpen && unicode === 32) {
      this.nextClicked();
    }
    if (unicode === 37 || unicode === 65) {
      this.leftPressed = false;
    }
    if (unicode === 39 || unicode === 68) {
      this.rightPressed = false;
    }
    if (unicode === 38 || unicode === 87) {
      this.upPressed = false;
    }
    if (unicode === 40 || unicode === 83) {
      this.downPressed = false;
    }
    if (unicode === 82) {
      this.reset();
    }
    /*
    		if unicode is 69
    			@toggleEditMode()
    		if unicode >= 48 and unicode <= 57
    			@renderer.editState = @editStates[unicode-48]
    		if unicode == 80
    			@renderer.editState = 'pickup'
    */

    return null;
  };

  App.prototype.toggleEditMode = function() {
    this.editMode = !this.editMode;
    return null;
  };

  App.prototype.parseCurrentLevel = function() {
    var levelData, text;
    console.log('PARSING');
    levelData = this.grid.getLevelData();
    console.log(levelData);
    text = this.parseLevelData(levelData);
    return null;
  };

  App.prototype.reset = function() {
    var _this = this;
    if (this.menuOpen || this.overOpen) {
      return;
    }
    this.renderer.hideLevel(function() {
      _this.menuOpen = true;
      _this.perfect = true;
      _this.lights = true;
      _this.currentLevel = 0;
      _this.updateDigits();
      _this.updateLights();
      _this.grid.createGrid(_this.levels[_this.currentLevel]);
      $('#game-holder').append(_this.menu);
      return TweenMax.to(_this.menu, 0.5, {
        css: {
          opacity: 1
        },
        ease: Power4.easeOut,
        onComplete: function() {
          return $('#next-button').bind('click touchstart', _this.nextClicked);
        }
      });
    });
    return null;
  };

  App.prototype.parseLevelData = function(data) {
    var pickup, str, tile;
    console.log('READING DATA :: ' + data);
    str = '';
    str += 'pickups:{\n';
    for (pickup in data.pickups) {
      str += '"' + pickup + '" : "' + data.pickups[pickup] + '",\n';
    }
    str += '},\n';
    str += 'startPos:{\n';
    str += 'x:' + data.startPos.x + ',\ny:' + data.startPos.y + '\n';
    str += '},\n';
    for (tile in data) {
      if (tile !== 'pickups' && tile !== 'startPos') {
        str += '"' + tile + '" : "' + data[tile] + '",\n';
      }
    }
    console.log('LEVEL STRING = \n' + str);
    return str;
  };

  return App;

})();
